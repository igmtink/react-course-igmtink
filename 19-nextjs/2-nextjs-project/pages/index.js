import MeetupList from "../components/meetups/MeetupList";
import Head from "next/head";
import { Section } from "@/components/ui/igmtink";

import { MongoClient } from "mongodb";

export default function Home(props) {
  return (
    <>
      <Head>
        <title>Meetups</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Section className="grid grid-cols-1 gap-8">
        <h1 className="text-2xl font-bold text-center uppercase">
          All Meetups
        </h1>
        {/* !(props.meetups) that we got from (getStaticProps) */}
        <MeetupList meetups={props.meetups} />
      </Section>
    </>
  );
}

// !Pre-rendered
// !(getStaticProps) handle all (Data) before executing the (Page / Components)
// !This is a (Backend) it will not reach their machines (Client or Server) side

// !This is how we manage (Data) in (NextJS), we don't use (useEffect)
// !Using (useEffect) is like we render the (Page / Components) two times to get the (Data)
// !Using (getStaticProps) before the (Page / Components) render we pre-rendered first (getStaticProps) to get the (Data)
export async function getStaticProps() {
  const client = await MongoClient.connect(
    "mongodb+srv://admin-test:admintest@testdb.ugiukba.mongodb.net/?retryWrites=true&w=majority"
  );
  const db = client.db();

  const meetupCollection = db.collection("meetups");

  // !To get all (Data) from (MongoDB)
  const meetups = await meetupCollection.find().toArray();

  client.close();

  // !It always return an {object}
  return {
    // !It has to be named (props) and hold another {object} which will be the (props object) we will be received in our (Page / Components)
    props: {
      meetups: meetups.map((meetup) => ({
        title: meetup.title,
        image: meetup.image,
        address: meetup.address,
        id: meetup._id.toString(),
      })),
    },
    // !(revalidate) called (Incremental Static Generation), we need (revalidate) to fetch new (Data) incoming request
    // !(10) is a number of seconds (NextJS) will wait until it regenerates this (Page / Components) for an incoming request
    revalidate: 1,
  };
}

// !(getServerSideProps) alternative of (getStaticProps)
// !This we don't need (revalidate), the (Page / Components) will always regenerates every incoming request
// export async function getServerSideProps() {
// return {
// props: {
// meetups: DUMMY_DB,
// },
// };
// }
